// This file is auto-generated by @hey-api/openapi-ts

export const $Timestamp = {
  type: "string",
  format: "date-time",
} as const;

export const $Error = {
  type: "object",
  properties: {
    code: {
      type: "string",
      examples: [2001],
      description: `The Genesis Cloud error code.
Check the [developer documentation](https://developers.com/#error-codes) for more information on error codes.
`,
    },
    message: {
      type: "string",
      examples: ["Invalid route"],
      description: "An explanation of what went wrong.",
    },
  },
  required: ["code", "message"],
} as const;

export const $Image = {
  type: "object",
  properties: {
    id: {
      $ref: "#/components/schemas/ImageId",
    },
    type: {
      $ref: "#/components/schemas/Image.Type",
    },
    family: {
      type: "string",
      nullable: true,
    },
    name: {
      type: "string",
      description:
        "The display name that has been given to an image. This is what is shown in the control panel and is generally a descriptive title for the image in question.",
    },
    os_type: {
      $ref: "#/components/schemas/OSType",
    },
    slug: {
      type: "string",
      nullable: true,
    },
    versions: {
      description:
        "The list of versions if this is a cloud-image otherwise empty.",
      type: "array",
      nullable: true,
      items: {
        type: "string",
      },
    },
    regions: {
      description: "The list of regions in which this image can be used in.",
      type: "array",
      items: {
        $ref: "#/components/schemas/Region",
      },
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "type",
    "family",
    "name",
    "os_type",
    "slug",
    "versions",
    "regions",
    "created_at",
    "updated_at",
  ],
} as const;

export const $Image_Type = {
  type: "string",
  description: "Describes the kind of image.",
  enum: ["base-os", "cloud-image", "preconfigured", "snapshot"],
} as const;

export const $Snapshot = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: `A unique identifier for each snapshot. This is automatically generated.
`,
    },
    name: {
      type: "string",
      description: `The human-readable name for the snapshot.
`,
    },
    size: {
      type: "integer",
      description: `The storage size of this snapshot given in GiB.
`,
    },
    resource_id: {
      type: "string",
      description: `The id of the resource (e.g. instance) that was snapshotted.
`,
    },
    region: {
      $ref: "#/components/schemas/Region",
    },
    status: {
      $ref: "#/components/schemas/Snapshot.Status",
    },
    os_type: {
      $ref: "#/components/schemas/OSType",
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "name",
    "size",
    "resource_id",
    "region",
    "status",
    "os_type",
    "created_at",
    "updated_at",
  ],
} as const;

export const $Snapshot_Status = {
  type: "string",
  description: "The snapshot status.",
  enum: [
    "creating",
    "created",
    "pending_delete",
    "deleting",
    "active",
    "error",
  ],
} as const;

export const $VolumeId = {
  type: "string",
  description: `A unique identifier for each volume. This is automatically generated.
`,
} as const;

export const $Volume = {
  type: "object",
  properties: {
    id: {
      $ref: "#/components/schemas/VolumeId",
    },
    name: {
      type: "string",
      description: "The human-readable name for the volume.",
    },
    description: {
      type: "string",
      description: "The human-readable description for the volume.",
    },
    type: {
      $ref: "#/components/schemas/VolumeType",
    },
    size: {
      type: "integer",
      description: "The storage size of this volume given in GiB.",
    },
    region: {
      $ref: "#/components/schemas/Region",
    },
    instances: {
      type: "array",
      description: "The attached instances.",
      items: {
        type: "object",
        properties: {
          id: {
            type: "string",
            description: "The id of the attached instance.",
          },
          name: {
            type: "string",
            description: "The name of the attached instance.",
          },
        },
      },
    },
    status: {
      $ref: "#/components/schemas/Volume.Status",
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "name",
    "description",
    "type",
    "size",
    "region",
    "instances",
    "status",
    "created_at",
    "updated_at",
  ],
} as const;

export const $Volume_Status = {
  type: "string",
  enum: [
    "creating",
    "created",
    "pending_delete",
    "deleting",
    "available",
    "in-use",
    "error",
  ],
} as const;

export const $FilesystemId = {
  type: "string",
  description: `A unique identifier for each filesystem. This is automatically generated.
`,
} as const;

export const $Filesystem = {
  type: "object",
  properties: {
    id: {
      $ref: "#/components/schemas/FilesystemId",
    },
    name: {
      type: "string",
      description: "The human-readable name for the filesystem.",
    },
    description: {
      type: "string",
      description: "The human-readable description for the filesystem.",
    },
    type: {
      $ref: "#/components/schemas/FilesystemType",
    },
    size: {
      type: "integer",
      description: "The storage size of this filesystem given in GiB.",
    },
    region: {
      $ref: "#/components/schemas/Region",
    },
    status: {
      $ref: "#/components/schemas/Filesystem.Status",
    },
    mount_endpoint_range: {
      type: "array",
      items: {
        type: "string",
      },
      minItems: 2,
      maxItems: 2,
      nullable: true,
      description: "The mount endpoint range of the filesystem.",
    },
    mount_base_path: {
      type: "string",
      nullable: true,
      description: "The mount base path of the filesystem.",
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "name",
    "description",
    "type",
    "size",
    "region",
    "status",
    "mount_endpoint_range",
    "mount_base_path",
    "created_at",
    "updated_at",
  ],
} as const;

export const $Filesystem_Status = {
  type: "string",
  enum: ["creating", "created", "deleting"],
} as const;

export const $SecurityGroupId = {
  type: "string",
  description: `A unique identifier for each security group. This is automatically generated.
`,
} as const;

export const $SecurityGroup = {
  type: "object",
  properties: {
    id: {
      $ref: "#/components/schemas/SecurityGroupId",
    },
    name: {
      type: "string",
      description: `The human-readable name for the security group.
`,
    },
    description: {
      type: "string",
      description: `The human-readable description for the security group.
`,
    },
    is_internal: {
      type: "boolean",
    },
    region: {
      $ref: "#/components/schemas/Region",
    },
    status: {
      $ref: "#/components/schemas/SecurityGroup.Status",
    },
    rules: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SecurityGroup.Rule",
      },
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "name",
    "description",
    "is_internal",
    "region",
    "status",
    "rules",
    "created_at",
    "updated_at",
  ],
} as const;

export const $SecurityGroup_Status = {
  type: "string",
  description: "The security group status.",
  enum: ["creating", "created", "deleting", "updating", "error"],
} as const;

export const $SecurityGroup_Rule = {
  type: "object",
  properties: {
    protocol: {
      $ref: "#/components/schemas/SecurityGroup.Rule.Protocol",
    },
    direction: {
      $ref: "#/components/schemas/SecurityGroup.Rule.Direction",
    },
    port_range_min: {
      description: "The minimum port number of the rule.",
      type: "integer",
      nullable: true,
    },
    port_range_max: {
      description: "The maximum port number of the rule.",
      type: "integer",
      nullable: true,
    },
  },
  required: ["protocol", "direction"],
} as const;

export const $SecurityGroup_Rule_Direction = {
  description: "The direction of the rule.",
  type: "string",
  enum: ["ingress", "egress"],
} as const;

export const $SecurityGroup_Rule_Protocol = {
  description: "The protocol of the rule.",
  type: "string",
  enum: ["tcp", "udp", "icmp", "all"],
} as const;

export const $Instance = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "The unique ID of the instance.",
    },
    name: {
      $ref: "#/components/schemas/Instance.Name",
    },
    hostname: {
      $ref: "#/components/schemas/Instance.Hostname",
    },
    dns_name: {
      $ref: "#/components/schemas/Instance.DNSName",
    },
    reservation_id: {
      type: "string",
      description:
        "The unique ID of the reservation the instance is associated with.",
      nullable: true,
    },
    type: {
      $ref: "#/components/schemas/Instance.Type",
    },
    os_type: {
      $ref: "#/components/schemas/OSType",
    },
    public_ip: {
      type: "string",
      description: "The public IPv4 IP-Address (IPv4 address).",
      examples: ["1.2.3.4"],
      nullable: true,
    },
    private_ip: {
      type: "string",
      description: "The private IPv4 IP-Address (IPv4 address).",
      examples: ["1.2.3.4"],
      nullable: true,
    },
    status: {
      $ref: "#/components/schemas/Instance.Status",
    },
    ssh_keys: {
      type: "array",
      description: "The ssh keys of the instance.",
      items: {
        type: "object",
        description: "The ssh key.",
        properties: {
          id: {
            $ref: "#/components/schemas/Instance.SSHKeyId",
          },
          name: {
            type: "string",
            description: "The name of the ssh key.",
          },
        },
        required: ["id", "name"],
      },
    },
    image: {
      type: "object",
      description: "The image of the instance.",
      properties: {
        id: {
          $ref: "#/components/schemas/ImageId",
        },
        name: {
          type: "string",
          description: "The image name.",
        },
      },
      required: ["id", "name"],
    },
    floating_ip: {
      type: "object",
      description: "The floating IP attached to the instance.",
      nullable: true,
      properties: {
        id: {
          type: "string",
          description: "The ID of the floating IP.",
        },
        name: {
          type: "string",
          description: "The name of the floating IP.",
        },
      },
      required: ["id", "name"],
    },
    security_groups: {
      type: "array",
      description: "The security groups of the instance.",
      items: {
        type: "object",
        properties: {
          id: {
            $ref: "#/components/schemas/SecurityGroupId",
          },
          name: {
            type: "string",
            description: "The name of the security group.",
          },
        },
        required: ["id", "name"],
      },
    },
    volumes: {
      type: "array",
      description: "The volumes of the instance",
      items: {
        type: "object",
        properties: {
          id: {
            $ref: "#/components/schemas/VolumeId",
          },
          name: {
            type: "string",
            description: "The volume name.",
          },
        },
        required: ["id", "name"],
      },
    },
    region: {
      $ref: "#/components/schemas/Region",
    },
    disk_size: {
      $ref: "#/components/schemas/Instance.DiskSize",
    },
    placement_option: {
      type: "string",
      description: `The placement option identifier in which instances are physically located relative to each other within a zone.
`,
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "name",
    "hostname",
    "dns_name",
    "type",
    "os_type",
    "public_ip",
    "private_ip",
    "status",
    "ssh_keys",
    "image",
    "security_groups",
    "volumes",
    "region",
    "placement_option",
    "created_at",
    "updated_at",
  ],
} as const;

export const $Instance_Name = {
  type: "string",
  description: "The human-readable name set for the instance.",
} as const;

export const $Instance_Hostname = {
  type: "string",
  description: "The hostname of your instance.",
} as const;

export const $Instance_DNSName = {
  type: "string",
  description: "The dns name of your instance.",
} as const;

export const $ImageId = {
  type: "string",
  description:
    "A unique number that can be used to identify and reference a specific image.",
} as const;

export const $Instance_SSHKeyId = {
  type: "string",
  description: "The ssh key ID.",
} as const;

export const $Instance_DiskSize = {
  type: "integer",
  description: `The storage size of the instance's boot volume given in GiB.
`,
} as const;

export const $Instance_IsProtected = {
  type: "boolean",
  default: false,
  description: `Specifies if the instance is termination protected.
When set to \`true\`, it"s not possible to destroy the instance until it"s switched to \`false\`.
Set to \`true\` automatically for long-term billed instances.
`,
} as const;

export const $Instance_DestroyOnShutdown = {
  type: "boolean",
  default: false,
  description: `Option that you can set at instance creation that will allow the instance to destroy on shutdown command
`,
} as const;

export const $Instance_Action = {
  type: "string",
  enum: ["start", "stop", "reset"],
} as const;

export const $Instance_Status = {
  type: "string",
  description: "The instance status",
  enum: [
    "creating",
    "pending_payment",
    "active",
    "stopping",
    "stopped",
    "starting",
    "resetting",
    "error",
    "deleting",
    "enqueued",
    "copying",
    "build",
    "restarting",
    "shutoff",
    "updating",
    "unknown",
  ],
} as const;

export const $Instance_FloatingIp = {
  type: "string",
  description: "The id of the floating IP to attach to the instance.",
} as const;

export const $Instance_PublicIpv6 = {
  type: "boolean",
  description: `A boolean value indicating whether the instance should have an ipv6 address or not.
`,
  default: false,
} as const;

export const $Instance_Type = {
  type: "string",
  description: "The instance type identifier.",
  examples: ["vcpu-4_memory-24g_disk-80g_nvidia3090-1"],
} as const;

export const $Instance_UserData = {
  type: "array",
  items: {
    type: "object",
    properties: {
      type: {
        type: "string",
      },
      filename: {
        type: "string",
      },
      content: {
        type: "string",
      },
    },
    required: ["type", "content"],
  },
} as const;

export const $Instance_BillingType = {
  type: "string",
  enum: [
    "on-demand",
    "prepaid-monthly",
    "prepaid-3-month",
    "prepaid-6-month",
    "prepaid-12-month",
  ],
  description: `The billing type of the instance.
`,
} as const;

export const $Instance_ReuseLongTermSubscription = {
  type: "string",
  description: `The long term subscription id to be used for this instance.
If not provided, the billing_type will default to on-demand.
`,
} as const;

export const $Instance_UpdateSecurityGroups = {
  oneOf: [
    {
      $ref: "#/components/schemas/Instance.UpdateSecurityGroups.List",
    },
    {
      $ref: "#/components/schemas/Instance.UpdateSecurityGroups.Attach",
    },
    {
      $ref: "#/components/schemas/Instance.UpdateSecurityGroups.Detach",
    },
  ],
} as const;

export const $Instance_UpdateSecurityGroups_List = {
  type: "array",
  description: "The instance's security group IDs.",
  items: {
    $ref: "#/components/schemas/SecurityGroupId",
  },
} as const;

export const $Instance_UpdateSecurityGroups_Attach = {
  type: "object",
  properties: {
    attach: {
      $ref: "#/components/schemas/SecurityGroupId",
    },
  },
  required: ["attach"],
} as const;

export const $Instance_UpdateSecurityGroups_Detach = {
  type: "object",
  properties: {
    detach: {
      $ref: "#/components/schemas/SecurityGroupId",
    },
  },
  required: ["detach"],
} as const;

export const $Instance_UpdateVolumes = {
  oneOf: [
    {
      $ref: "#/components/schemas/Instance.UpdateVolumes.List",
    },
    {
      $ref: "#/components/schemas/Instance.UpdateVolumes.Attach",
    },
    {
      $ref: "#/components/schemas/Instance.UpdateVolumes.Detach",
    },
  ],
} as const;

export const $Instance_UpdateVolumes_List = {
  type: "array",
  description: "The instance's volume IDs.",
  items: {
    $ref: "#/components/schemas/VolumeId",
  },
} as const;

export const $Instance_UpdateVolumes_Attach = {
  type: "object",
  properties: {
    attach: {
      $ref: "#/components/schemas/VolumeId",
    },
  },
  required: ["attach"],
} as const;

export const $Instance_UpdateVolumes_Detach = {
  type: "object",
  properties: {
    detach: {
      $ref: "#/components/schemas/VolumeId",
    },
  },
  required: ["detach"],
} as const;

export const $SSHKey = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: `A unique identifier for each SSH key. This is automatically generated.
`,
    },
    name: {
      type: "string",
      description: `The human-readable name for the SSH key.
`,
    },
    value: {
      type: "string",
      description: `SSH public key.
`,
    },
    fingerprint: {
      type: "string",
      description: `The fingerprint of the SSH key.
`,
    },
    type: {
      type: "string",
      description: `The encryption algorithm type of the SSH key.
`,
    },
    size: {
      type: "integer",
      description: `The length of the SSH key.
`,
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "name",
    "value",
    "fingerprint",
    "type",
    "size",
    "created_at",
    "updated_at",
  ],
} as const;

export const $FloatingIP = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: `A unique identifier for each floating IP. This is automatically generated.
`,
    },
    name: {
      type: "string",
      description: `The human-readable name for the floating IP.
`,
    },
    description: {
      type: "string",
      description: `The human-readable description for the floating IP.
`,
    },
    ip_address: {
      type: "string",
      nullable: true,
      description: `The IP address of the floating IP.
`,
    },
    is_public: {
      type: "boolean",
      description: `A boolean value indicating whether the floating IP is public or private.
`,
    },
    version: {
      type: "string",
      enum: ["ipv4", "ipv6"],
      description: `The IP version of the floating IP.
`,
    },
    region: {
      $ref: "#/components/schemas/Region",
    },
    status: {
      $ref: "#/components/schemas/FloatingIp.Status",
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    instance: {
      type: "object",
      nullable: true,
      properties: {
        id: {
          type: "string",
          description: `A unique identifier for the attached instance.
`,
        },
        name: {
          type: "string",
          description: `The name of the attached instance.
`,
        },
      },
      required: ["id", "name"],
    },
  },
  required: [
    "id",
    "name",
    "description",
    "is_public",
    "region",
    "status",
    "created_at",
    "updated_at",
    "ip_address",
    "version",
    "instance",
  ],
} as const;

export const $FloatingIp_Status = {
  type: "string",
  description: "The floating ip status.",
  enum: ["creating", "created", "deleting", "error"],
} as const;

export const $Catalog = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: `A unique identifier for each catalog. This is automatically generated.
`,
    },
    name: {
      type: "string",
      description: `The human-readable name for the catalog.
`,
    },
    description: {
      type: "string",
      description: `The human-readable description for the catalog.
`,
    },
    logo_url: {
      type: "string",
      description: `The url of the catalog
`,
    },
    requires_driver: {
      type: "boolean",
      description: `The image catalog requires driver
`,
    },
    base_image_ids: {
      type: "array",
      items: {
        type: "string",
      },
    },
    images: {
      type: "array",
      items: {
        type: "object",
        properties: {
          id: {
            type: "string",
          },
          name: {
            type: "string",
          },
        },
        required: ["id", "name"],
      },
    },
    fields: {
      $ref: "#/components/schemas/Catalog.Fields",
    },
    created_at: {
      $ref: "#/components/schemas/Timestamp",
    },
    updated_at: {
      $ref: "#/components/schemas/Timestamp",
    },
  },
  required: [
    "id",
    "name",
    "description",
    "logo_url",
    "requires_driver",
    "images",
    "base_image_ids",
    "fields",
    "created_at",
    "updated_at",
  ],
} as const;

export const $Catalog_Fields = {
  type: "array",
  items: {
    type: "object",
    properties: {
      key: {
        type: "string",
      },
      label: {
        type: "string",
      },
      type: {
        type: "string",
      },
      env: {
        type: "string",
      },
    },
    required: ["key", "label", "type", "env"],
  },
} as const;

export const $InstancesAvailability = {
  type: "object",
  properties: {
    availability: {
      type: "object",
      properties: {
        type: {
          type: "string",
          examples: ["instances"],
        },
        region: {
          $ref: "#/components/schemas/Region",
        },
        placement: {
          type: "string",
        },
        instance_types: {
          type: "array",
          items: {
            type: "object",
            properties: {
              type: {
                $ref: "#/components/schemas/Instance.Type",
              },
              available: {
                type: "boolean",
              },
              count: {
                type: "number",
              },
            },
            required: ["type", "available"],
          },
        },
      },
      required: ["type", "region", "instance_types"],
    },
  },
  required: ["availability"],
} as const;

export const $Region = {
  type: "string",
  description: "The region identifier.",
  enum: ["ARC-IS-HAF-1", "EUC-DE-MUC-1", "NORD-NO-KRS-1"],
} as const;

export const $VolumeType = {
  type: "string",
  description: "The volume type.",
  enum: ["ssd", "hdd"],
} as const;

export const $FilesystemType = {
  type: "string",
  description: "The filesystem type.",
  enum: ["vast"],
} as const;

export const $OSType = {
  type: "string",
  description: "The OS type.",
  enum: ["linux", "windows"],
} as const;

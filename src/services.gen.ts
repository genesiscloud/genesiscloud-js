// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import type { BaseHttpRequest } from "./core/BaseHttpRequest";
import type { $OpenApiTs } from "./types.gen";

export class ImagesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List images
   * @returns unknown PaginatedImagesResponse
   * @throws ApiError
   */
  public listImages(
    data: $OpenApiTs["/images"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/images"]["get"]["res"][200]> {
    const { page, perPage, type } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/images",
      query: {
        page,
        per_page: perPage,
        type,
      },
    });
  }
}

export class SnapshotsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create snapshot
   * @returns unknown SingleSnapshotResponse
   * @throws ApiError
   */
  public createSnapshot(
    data: $OpenApiTs["/snapshots"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/snapshots"]["post"]["res"][201]> {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/snapshots",
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * List Snapshots
   * @returns unknown PaginatedSnapshotsResponse
   * @throws ApiError
   */
  public listSnapshots(
    data: $OpenApiTs["/snapshots"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/snapshots"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/snapshots",
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Get snapshot
   * Get details of a snapshot with the given ID
   * @returns unknown SingleSnapshotResponse
   * @throws ApiError
   */
  public getSnapshot(
    data: $OpenApiTs["/snapshots/{snapshot_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/snapshots/{snapshot_id}"]["get"]["res"][200]
  > {
    const { snapshotId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/snapshots/{snapshot_id}",
      path: {
        snapshot_id: snapshotId,
      },
    });
  }

  /**
   * Update snapshot
   * Update the details of a snapshot with the given ID
   * @returns unknown SingleSnapshotResponse
   * @throws ApiError
   */
  public updateSnapshot(
    data: $OpenApiTs["/snapshots/{snapshot_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/snapshots/{snapshot_id}"]["patch"]["res"][200]
  > {
    const { requestBody, snapshotId } = data;
    return this.httpRequest.request({
      method: "PATCH",
      url: "/snapshots/{snapshot_id}",
      path: {
        snapshot_id: snapshotId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete snapshot
   * Delete a snapshot with the given ID
   * @returns void success
   * @throws ApiError
   */
  public deleteSnapshot(
    data: $OpenApiTs["/snapshots/{snapshot_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/snapshots/{snapshot_id}"]["delete"]["res"][204]
  > {
    const { snapshotId } = data;
    return this.httpRequest.request({
      method: "DELETE",
      url: "/snapshots/{snapshot_id}",
      path: {
        snapshot_id: snapshotId,
      },
    });
  }
}

export class VolumesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create volume
   * @returns unknown SingleVolumeResponse
   * @throws ApiError
   */
  public createVolume(
    data: $OpenApiTs["/volumes"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/volumes"]["post"]["res"][201]> {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/volumes",
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * List volumes
   * @returns unknown PaginatedVolumesResponse
   * @throws ApiError
   */
  public listVolumes(
    data: $OpenApiTs["/volumes"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/volumes"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/volumes",
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Get volume
   * Get details of a volume with the given ID
   * @returns unknown SingleVolumeResponse
   * @throws ApiError
   */
  public getVolume(
    data: $OpenApiTs["/volumes/{volume_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/volumes/{volume_id}"]["get"]["res"][200]> {
    const { volumeId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/volumes/{volume_id}",
      path: {
        volume_id: volumeId,
      },
    });
  }

  /**
   * Update volume
   * Update the details of a volume with the given ID
   * @returns unknown SingleVolumeResponse
   * @throws ApiError
   */
  public updateVolume(
    data: $OpenApiTs["/volumes/{volume_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/volumes/{volume_id}"]["patch"]["res"][200]
  > {
    const { requestBody, volumeId } = data;
    return this.httpRequest.request({
      method: "PATCH",
      url: "/volumes/{volume_id}",
      path: {
        volume_id: volumeId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete volume
   * Delete a volume with the given ID
   * @returns void success
   * @throws ApiError
   */
  public deleteVolume(
    data: $OpenApiTs["/volumes/{volume_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/volumes/{volume_id}"]["delete"]["res"][204]
  > {
    const { volumeId } = data;
    return this.httpRequest.request({
      method: "DELETE",
      url: "/volumes/{volume_id}",
      path: {
        volume_id: volumeId,
      },
    });
  }
}

export class FilesystemsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create filesystem
   * @returns unknown SingleFilesystemResponse
   * @throws ApiError
   */
  public createFilesystem(
    data: $OpenApiTs["/filesystems"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/filesystems"]["post"]["res"][201]> {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/filesystems",
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * List filesystems
   * @returns unknown PaginatedFilesystemsResponse
   * @throws ApiError
   */
  public listFilesystems(
    data: $OpenApiTs["/filesystems"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/filesystems"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/filesystems",
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Get filesystem
   * Get details of a filesystem with the given ID
   * @returns unknown SingleFilesystemResponse
   * @throws ApiError
   */
  public getFilesystem(
    data: $OpenApiTs["/filesystems/{filesystem_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/filesystems/{filesystem_id}"]["get"]["res"][200]
  > {
    const { filesystemId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/filesystems/{filesystem_id}",
      path: {
        filesystem_id: filesystemId,
      },
    });
  }

  /**
   * Update filesystem
   * Update the details of a filesystem with the given ID
   * @returns unknown SingleFilesystemResponse
   * @throws ApiError
   */
  public updateFilesystem(
    data: $OpenApiTs["/filesystems/{filesystem_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/filesystems/{filesystem_id}"]["patch"]["res"][200]
  > {
    const { requestBody, filesystemId } = data;
    return this.httpRequest.request({
      method: "PATCH",
      url: "/filesystems/{filesystem_id}",
      path: {
        filesystem_id: filesystemId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete filesystem
   * Delete a filesystem with the given ID
   * @returns void success
   * @throws ApiError
   */
  public deleteFilesystem(
    data: $OpenApiTs["/filesystems/{filesystem_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/filesystems/{filesystem_id}"]["delete"]["res"][204]
  > {
    const { filesystemId } = data;
    return this.httpRequest.request({
      method: "DELETE",
      url: "/filesystems/{filesystem_id}",
      path: {
        filesystem_id: filesystemId,
      },
    });
  }
}

export class SecurityGroupsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List security groups
   * @returns unknown PaginatedSecurityGroupsResponse
   * @throws ApiError
   */
  public listSecurityGroups(
    data: $OpenApiTs["/security-groups"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/security-groups"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/security-groups",
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Create security group
   * @returns unknown SingleSecurityGroupResponse
   * @throws ApiError
   */
  public createSecurityGroup(
    data: $OpenApiTs["/security-groups"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/security-groups"]["post"]["res"][201]> {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/security-groups",
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get security group
   * Get details of a security group with the given ID
   * @returns unknown SingleSecurityGroupResponse
   * @throws ApiError
   */
  public getSecurityGroup(
    data: $OpenApiTs["/security-groups/{security_group_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/security-groups/{security_group_id}"]["get"]["res"][200]
  > {
    const { securityGroupId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/security-groups/{security_group_id}",
      path: {
        security_group_id: securityGroupId,
      },
    });
  }

  /**
   * Update security group
   * Update the details of a security group with the given ID
   * @returns unknown SingleSecurityGroupResponse
   * @throws ApiError
   */
  public updateSecurityGroup(
    data: $OpenApiTs["/security-groups/{security_group_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/security-groups/{security_group_id}"]["patch"]["res"][200]
  > {
    const { requestBody, securityGroupId } = data;
    return this.httpRequest.request({
      method: "PATCH",
      url: "/security-groups/{security_group_id}",
      path: {
        security_group_id: securityGroupId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete security group
   * Delete a security group with the given ID
   * @returns void success
   * @throws ApiError
   */
  public deleteSecurityGroup(
    data: $OpenApiTs["/security-groups/{security_group_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/security-groups/{security_group_id}"]["delete"]["res"][204]
  > {
    const { securityGroupId } = data;
    return this.httpRequest.request({
      method: "DELETE",
      url: "/security-groups/{security_group_id}",
      path: {
        security_group_id: securityGroupId,
      },
    });
  }
}

export class InstancesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List instances
   * @returns unknown PaginatedInstancesResponse
   * @throws ApiError
   */
  public listInstances(
    data: $OpenApiTs["/instances"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/instances"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/instances",
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Create instance
   * @returns unknown SingleInstanceResponse
   * @throws ApiError
   */
  public createInstance(
    data: $OpenApiTs["/instances"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/instances"]["post"]["res"][201]> {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/instances",
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get instance
   * Get details of an instance with the given ID.
   * @returns unknown SingleInstanceResponse
   * @throws ApiError
   */
  public getInstance(
    data: $OpenApiTs["/instances/{instance_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/instances/{instance_id}"]["get"]["res"][200]
  > {
    const { instanceId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/instances/{instance_id}",
      path: {
        instance_id: instanceId,
      },
    });
  }

  /**
   * Delete instance
   * Delete an instance with the given ID.
   * @returns void success
   * @throws ApiError
   */
  public deleteInstance(
    data: $OpenApiTs["/instances/{instance_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/instances/{instance_id}"]["delete"]["res"][204]
  > {
    const { instanceId } = data;
    return this.httpRequest.request({
      method: "DELETE",
      url: "/instances/{instance_id}",
      path: {
        instance_id: instanceId,
      },
    });
  }

  /**
   * Update instance (attach/detach volumes, security groups, instance name)
   * Update instance with the given ID (attach/detach volumes, security groups, name).
   * @returns unknown SingleInstanceResponse
   * @throws ApiError
   */
  public updateInstance(
    data: $OpenApiTs["/instances/{instance_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/instances/{instance_id}"]["patch"]["res"][200]
  > {
    const { requestBody, instanceId } = data;
    return this.httpRequest.request({
      method: "PATCH",
      url: "/instances/{instance_id}",
      path: {
        instance_id: instanceId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * List Instance actions
   * Liste all actions that can currently be performed on a instance.
   * @returns unknown Instance.ListActionsResponse
   * @throws ApiError
   */
  public listInstanceActions(
    data: $OpenApiTs["/instances/{instance_id}/actions"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/instances/{instance_id}/actions"]["get"]["res"][200]
  > {
    const { instanceId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/instances/{instance_id}/actions",
      path: {
        instance_id: instanceId,
      },
    });
  }

  /**
   * Perform action
   * The action to perform on the instance.
   * @returns void success
   * @throws ApiError
   */
  public performInstanceAction(
    data: $OpenApiTs["/instances/{instance_id}/actions"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/instances/{instance_id}/actions"]["post"]["res"][204]
  > {
    const { requestBody, instanceId } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/instances/{instance_id}/actions",
      path: {
        instance_id: instanceId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * List instance snapshots
   * @returns unknown PaginatedSnapshotsResponse
   * @throws ApiError
   */
  public listInstanceSnapshots(
    data: $OpenApiTs["/instances/{instance_id}/snapshots"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/instances/{instance_id}/snapshots"]["get"]["res"][200]
  > {
    const { instanceId, page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/instances/{instance_id}/snapshots",
      path: {
        instance_id: instanceId,
      },
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Create instance snapshot
   * Takes a snapshot of the instance.
   * @returns unknown SingleSnapshotResponse
   * @throws ApiError
   */
  public createInstanceSnapshot(
    data: $OpenApiTs["/instances/{instance_id}/snapshots"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/instances/{instance_id}/snapshots"]["post"]["res"][201]
  > {
    const { requestBody, instanceId } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/instances/{instance_id}/snapshots",
      path: {
        instance_id: instanceId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }
}

export class SshKeysService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List SSH keys
   * @returns unknown PaginatedSSHKeysResponse
   * @throws ApiError
   */
  public listSshKeys(
    data: $OpenApiTs["/ssh-keys"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/ssh-keys"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/ssh-keys",
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Create SSH key
   * @returns SSHKey SingleSSHKeyResponse
   * @throws ApiError
   */
  public createSshKey(
    data: $OpenApiTs["/ssh-keys"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/ssh-keys"]["post"]["res"][201]> {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/ssh-keys",
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get SSH key
   * Get details of a ssh key with the given ID.
   * @returns SSHKey SingleSSHKeyResponse
   * @throws ApiError
   */
  public getSshKey(
    data: $OpenApiTs["/ssh-keys/{ssh_key_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/ssh-keys/{ssh_key_id}"]["get"]["res"][200]
  > {
    const { sshKeyId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/ssh-keys/{ssh_key_id}",
      path: {
        ssh_key_id: sshKeyId,
      },
    });
  }

  /**
   * Update SSH key
   * Edit the name of an existing SSH key.
   * @returns SSHKey SingleSSHKeyResponse
   * @throws ApiError
   */
  public updateSshKey(
    data: $OpenApiTs["/ssh-keys/{ssh_key_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/ssh-keys/{ssh_key_id}"]["patch"]["res"][200]
  > {
    const { requestBody, sshKeyId } = data;
    return this.httpRequest.request({
      method: "PATCH",
      url: "/ssh-keys/{ssh_key_id}",
      path: {
        ssh_key_id: sshKeyId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete SSH key
   * Delete a ssh key with the given ID.
   * @returns void success
   * @throws ApiError
   */
  public deleteSshKey(
    data: $OpenApiTs["/ssh-keys/{ssh_key_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/ssh-keys/{ssh_key_id}"]["delete"]["res"][204]
  > {
    const { sshKeyId } = data;
    return this.httpRequest.request({
      method: "DELETE",
      url: "/ssh-keys/{ssh_key_id}",
      path: {
        ssh_key_id: sshKeyId,
      },
    });
  }
}

export class FloatingIpsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List floating IPs
   * @returns unknown PaginatedFloatingIPsResponse
   * @throws ApiError
   */
  public listFloatingIps(
    data: $OpenApiTs["/floating-ips"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/floating-ips"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/floating-ips",
      query: {
        page,
        per_page: perPage,
      },
    });
  }

  /**
   * Create floating IP
   * Create a new floating IP.
   * @returns unknown SingleFloatingIPResponse
   * @throws ApiError
   */
  public createFloatingIp(
    data: $OpenApiTs["/floating-ips"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/floating-ips"]["post"]["res"][201]> {
    const { requestBody } = data;
    return this.httpRequest.request({
      method: "POST",
      url: "/floating-ips",
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Get floating IP
   * Get floating IP.
   * @returns unknown SingleFloatingIPResponse
   * @throws ApiError
   */
  public getFloatingIp(
    data: $OpenApiTs["/floating-ips/{floating_ip_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/floating-ips/{floating_ip_id}"]["get"]["res"][200]
  > {
    const { floatingIpId } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/floating-ips/{floating_ip_id}",
      path: {
        floating_ip_id: floatingIpId,
      },
    });
  }

  /**
   * Update floating IP
   * Update an existing floating IP.
   * @returns unknown SingleFloatingIPResponse
   * @throws ApiError
   */
  public updateFloatingIp(
    data: $OpenApiTs["/floating-ips/{floating_ip_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/floating-ips/{floating_ip_id}"]["patch"]["res"][200]
  > {
    const { requestBody, floatingIpId } = data;
    return this.httpRequest.request({
      method: "PATCH",
      url: "/floating-ips/{floating_ip_id}",
      path: {
        floating_ip_id: floatingIpId,
      },
      body: requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * Delete floating IP
   * Delete floating IP.
   * @returns void success
   * @throws ApiError
   */
  public deleteFloatingIp(
    data: $OpenApiTs["/floating-ips/{floating_ip_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/floating-ips/{floating_ip_id}"]["delete"]["res"][204]
  > {
    const { floatingIpId } = data;
    return this.httpRequest.request({
      method: "DELETE",
      url: "/floating-ips/{floating_ip_id}",
      path: {
        floating_ip_id: floatingIpId,
      },
    });
  }
}

export class AvailabilityService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get cluster availability for region
   * @returns InstancesAvailability InstancesAvailabilityResponse
   * @throws ApiError
   */
  public getInstancesAvailability(
    data: $OpenApiTs["/availability/{region}/instances"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/availability/{region}/instances"]["get"]["res"][200]
  > {
    const { region, placement } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/availability/{region}/instances",
      path: {
        region,
      },
      query: {
        placement,
      },
    });
  }
}

export class CatalogService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List catalog
   * @returns unknown PaginatedCatalogResponse
   * @throws ApiError
   */
  public listCatalog(
    data: $OpenApiTs["/catalog"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/catalog"]["get"]["res"][200]> {
    const { page, perPage } = data;
    return this.httpRequest.request({
      method: "GET",
      url: "/catalog",
      query: {
        page,
        per_page: perPage,
      },
    });
  }
}
